from config import db, ma
from marshmallow import Schema, fields, validate
from models.policy_tax_base import PolicyTaxBase
from models.policy_tax_type import PolicyTaxType
from models.policy_tax_price import PolicyTaxPrice
from models.policy_tax_vat import PolicyTaxVat
from datetime import datetime
from common.util import Util

class PolicyTaxGroup(db.Model):
    __tablename__ = "def_policy_tax_group"

    iddef_policy_tax_group = db.Column(db.Integer, primary_key=True)
    iddef_policy = db.Column(db.Integer, db.ForeignKey("def_policy.iddef_policy"), nullable=False)
    iddef_policy_tax_base = db.Column(db.Integer, db.ForeignKey("def_policy_tax_base.iddef_policy_tax_base"), nullable=False)
    policy_tax_base = db.relationship('PolicyTaxBase', backref=db.backref('def_policy_tax_group', lazy=True))
    iddef_policy_tax_type = db.Column(db.Integer, db.ForeignKey("def_policy_tax_type.iddef_policy_tax_type"), nullable=False)
    policy_tax_type = db.relationship('PolicyTaxType', backref=db.backref('def_policy_tax_group', lazy=True))
    iddef_policy_tax_price = db.Column(db.Integer, db.ForeignKey("def_policy_tax_price.iddef_policy_tax_price"), nullable=False)
    policy_tax_price = db.relationship('PolicyTaxPrice', backref=db.backref('def_policy_tax_group', lazy=True))
    iddef_policy_tax_vat = db.Column(db.Integer, db.ForeignKey("def_policy_tax_vat.iddef_policy_tax_vat"), nullable=False)
    policy_tax_vat = db.relationship('PolicyTaxVat', backref=db.backref('def_policy_tax_group', lazy=True))
    amount = db.Column(db.Numeric(15,4), nullable=False, default=0.0000)
    max_amount = db.Column(db.Numeric(15,4), nullable=False, default=0.0000)
    is_custom_text = db.Column(db.Integer, nullable=False)
    description_en = db.Column(db.Text(), nullable=False)
    description_es = db.Column(db.Text(), nullable=False)
    use_maximum_amount = db.Column(db.Integer, nullable=False)
    use_custom_desc = db.Column(db.Integer, nullable=False)
    use_ages_range = db.Column(db.Integer, nullable=False)
    age_ranges = db.Column(db.JSON, nullable=False)
    use_dates_range = db.Column(db.Integer, nullable=False)
    date_ranges = db.Column(db.JSON, nullable=False)
    estado = db.Column(db.Integer, nullable=False)
    usuario_creacion = db.Column(db.String(45), nullable=False)
    fecha_creacion = db.Column(db.DateTime, default=datetime.utcnow)
    usuario_ultima_modificacion = db.Column(db.String(45), default="")
    fecha_ultima_modificacion = db.Column(db.DateTime, default="1900-01-01 00:00:00", onupdate=datetime.utcnow)

class PolicyTaxGroupSchema(ma.Schema):
    iddef_policy_tax_group = fields.Integer()
    iddef_policy = fields.Integer(required=True)
    iddef_policy_tax_base = fields.Integer(required=True)
    policy_tax_base = ma.Pluck("PolicyTaxBaseSchema", 'description')
    iddef_policy_tax_type = fields.Integer(required=True)
    policy_tax_type = ma.Pluck("PolicyTaxTypeSchema", 'description')
    iddef_policy_tax_price = fields.Integer(required=True)
    policy_tax_price = ma.Pluck("PolicyTaxPriceSchema", 'description')
    iddef_policy_tax_vat = fields.Integer(required=True)
    policy_tax_vat = ma.Pluck("PolicyTaxVatSchema", 'description')
    amount = fields.Decimal(required=True, as_string=True)
    max_amount = fields.Decimal(required=True, as_string=True)
    is_custom_text = fields.Integer(required=True)
    description_en = fields.String(required=True)
    description_es = fields.String(required=True)
    use_maximum_amount = fields.Integer(required=True)
    use_custom_desc = fields.Integer(required=True)
    use_ages_range = fields.Integer(required=True)
    age_ranges = fields.List(fields.Dict)
    use_dates_range = fields.Integer(required=True)
    date_ranges = fields.List(fields.Dict())
    estado = fields.Integer()
    usuario_creacion = fields.String(validate=validate.Length(max=45))
    fecha_creacion = fields.DateTime("%Y-%m-%d %H:%M:%S")
    usuario_ultima_modificacion = fields.String(validate=validate.Length(max=45))
    fecha_ultima_modificacion = fields.DateTime("%Y-%m-%d %H:%M:%S")

class GetPolicyTaxGroupSchema(ma.Schema):
    iddef_policy_tax_group = fields.Integer()
    iddef_policy = fields.Integer()
    iddef_policy_tax_base = fields.Integer()
    policy_tax_base = ma.Pluck("PolicyTaxBaseSchema", 'description')
    iddef_policy_tax_type = fields.Integer()
    policy_tax_type = ma.Pluck("PolicyTaxTypeSchema", 'description')
    iddef_policy_tax_price = fields.Integer()
    policy_tax_price = ma.Pluck("PolicyTaxPriceSchema", 'description')
    iddef_policy_tax_vat = fields.Integer()
    policy_tax_vat = ma.Pluck("PolicyTaxVatSchema", 'description')
    amount = fields.Decimal(as_string=True)
    max_amount = fields.Decimal(as_string=True)
    is_custom_text = fields.Integer()
    description_en = fields.String()
    description_es = fields.String()
    use_maximum_amount = fields.Integer()
    use_custom_desc = fields.Integer()
    use_ages_range = fields.Integer()
    age_ranges = fields.List(fields.Dict)
    use_dates_range = fields.Integer()
    date_ranges = fields.List(fields.Dict())
    estado = fields.Integer()
    usuario_creacion = fields.String(validate=validate.Length(max=45))
    fecha_creacion = fields.DateTime("%Y-%m-%d %H:%M:%S")
    usuario_ultima_modificacion = fields.String(validate=validate.Length(max=45))
    fecha_ultima_modificacion = fields.DateTime("%Y-%m-%d %H:%M:%S")